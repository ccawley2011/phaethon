sudo: required
dist: xenial

language: cpp
compiler:
  - gcc
  - clang

os:
  - linux
  - osx

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "dn5Irr/svB2d/iouvSxxoe2SEAWlPUlkNlGWScngWhqSp+kEJ8p3ubQG0ogCK0vGGHPwUYXfIQvHQ8oSc2Z4na8rIwZqvkJnxYYKvPLZpweKhb+xQbpjPwDwEycFDxT+y7mPnRLKRDtdmcuRqMQh8gnxb6TMY9xqlCCvnTfwTmI="
    - coverity_scan_run_condition='\( "$CC" = "gcc" \) -a \( $USECMAKE -eq 0 \) -a \( "$TRAVIS_OS_NAME" = "linux" \)'
    - coverity_scan_script_test_mode=false
    # Various conditions where the Travis CI scripts should behave differently
    - is_coverity_branch='\( "$TRAVIS_BRANCH" = "coverity_scan" \)'
    - is_valid_config='\( ! '"$is_coverity_branch"' \) -o \( '"$coverity_scan_run_condition"' \)'
    - is_valid_osx='\( "$TRAVIS_OS_NAME" = "osx" \) -a \( '"$is_valid_config"' \)'
    - is_valid_linux='\( "$TRAVIS_OS_NAME" = "linux" \) -a \( '"$is_valid_config"' \)'
    - is_notcoverity_autot='\( ! '"$is_coverity_branch"' \) -a \( $USECMAKE -eq 0 \)'
    - is_notcoverity_cmake='\( ! '"$is_coverity_branch"' \) -a \( $USECMAKE -eq 1 \)'
  matrix:
    # Let's test both our autoconf and CMake build system
    - USECMAKE=0
    - USECMAKE=1

matrix:
  exclude:
    # On Linux, we only need to test one compiler with both autools and CMake.
    # This gives us three builds on Linux: autotools+gcc, autotools+clang, CMake+gcc
    - compiler: clang
      os: linux
      env: USECMAKE=1
    # On macOS, gcc is deprecated, so we only build with clang there.
    # This gives us two builds on macOS: autotools+clang, CMake+clang
    - compiler: gcc
      os: osx

before_install:
  # Installing macOS dependencies, using brew
  - if eval [ $is_valid_osx ]; then brew update; fi
  - if eval [ $is_valid_osx ]; then brew install qt openal-soft mad faad2 libvorbis zlib xz libxml2; fi
  - if eval [ $is_valid_osx ]; then brew link --force qt; fi
  # Installing Linux dependencies, using apt-get
  #
  # Here, we're also installing a new gcc, for C++14 support.
  # This is a bit of a complicated setup, because the C++ ABI change
  # means we can't mix-n-match C++ stuff from different sources
  #
  # So we do this in 3 steps:
  # 1) We add the Bionic repos, and upgrade the libc, gcc and binutils
  # 2) We remove libgl1-mesa-glx and libgl1-mesa-dev, because Ubuntu moved the packages around
  # 3) We install our library dependencies
  - if eval [ $is_valid_linux ]; then echo "yes" | sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu bionic main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux ]; then echo "yes" | sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu bionic-updates main universe restricted multiverse"; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get update -qq; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 install build-essential libcurl4 make autoconf automake libtool dpkg dpkg-dev gcc g++ libc6-dev libc6 binutils binutils-dev; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 remove libgl1-mesa-glx libgl1-mesa-dev; fi
  - if eval [ $is_valid_linux ]; then sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" -o APT::Force-LoopBreak=1 install libboost-all-dev libopenal-dev libmad0-dev libvorbis-dev zlib1g-dev liblzma-dev qtbase5-dev libqt5gui5 libqt5multimedia5 qtmultimedia5-dev libqt5multimediawidgets5 libgl1 libgl-dev libglu-dev; fi

script:
  # autotools build system: ./autogen.sh && ./configure && make && make check
  - if eval [ $is_notcoverity_autot ]; then ./autogen.sh; fi
  - if eval [ $is_notcoverity_autot ]; then ./configure || (cat config.log; exit 1); fi
  - if eval [ $is_notcoverity_autot ]; then make -j4; fi
  - if eval [ $is_notcoverity_autot ]; then echo "" > test-suite.log; make -j4 check || (cat test-suite.log; exit 1); fi
  # CMake build system: cmake . && make && make check
  - if eval [ $is_notcoverity_cmake ]; then cmake .; fi
  - if eval [ $is_notcoverity_cmake ]; then make -j4; fi
  - if eval [ $is_notcoverity_cmake ]; then make -j4 check; fi

addons:
  coverity_scan:
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis_coverity.sh
    project:
      name: $TRAVIS_REPO_SLUG
    notification_email: drmccoy@drmccoy.de
    build_command_prepend: "./autogen.sh && ./configure"
    build_command: "make -j4 check"
    branch_pattern: coverity_scan

notifications:
  email:
    recipients:
      - ndbrandes@gmail.com
    on_success: change
    on_failure: always
  irc:
    channels:
      - secure: "jPAkI6da6HEi+7KfiojReS3EQL1NnuQAe98Lv6dU9UMCsGR9bDMbzE0dMs8BU80MLsPFjy5OKBG0WMXTr43Los/igG9YG5g3VmYuV4w8D1+hjKbcDTxsUwusHz70W1p6NMd3WeWYkgNXRh9wZxAozNoAtouFKkjYlDzMqGAdTSc="
    on_success: change
    on_failure: always
    use_notice: true
